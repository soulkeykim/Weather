apply plugin: 'com.android.application'
buildscript {
    repositories {
        jcenter()
        maven { url 'http://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.0'
    }
}

apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'
apply plugin: 'icon-version'

apply from: '../buildscripts/jacoco.gradle'
apply from: '../buildscripts/utils.gradle'

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_SERVER", "\"http://api.openweathermap.org/\""
        buildConfigField "String", "API_KEY", "\"2d853109ecb966fc593dc16bacd68ed5\""
    }

    signingConfigs {
        release {
            if (config.releaseSigning.storePassword != null) {
                storeFile file(config.releaseSigning.storeFile)
                storePassword config.releaseSigning.storePassword
                keyAlias config.releaseSigning.alias
                keyPassword config.releaseSigning.aliasPassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-${getCiBuildNumber()}"
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        us {
            applicationId "${config.applicationId}.us"
            resValue "string", "app_name", "${config.appNameUS}"
            resValue "color", "primary", "#CC0000"
            resValue "color", "primary_dark", "#003399"
            resValue "color", "accent", "#DAA520"
            buildConfigField "String", "TEMP_UNIT", "\"imperial\""
            buildConfigField "String", "DEFAULT_CITY", "\"portland\""
        }
        au {
            applicationId "${config.applicationId}.au"
            resValue "string", "app_name", "${config.appNameAU}"
            resValue "color", "primary", "#003399"
            resValue "color", "primary_dark", "#87CEFA"
            resValue "color", "accent", "#CC0000"
            buildConfigField "String", "TEMP_UNIT", "\"metric\""
            buildConfigField "String", "DEFAULT_CITY", "\"sydney\""
        }
        ca {
            applicationId "${config.applicationId}.ca"
            resValue "string", "app_name", "${config.appNameCA}"
            resValue "color", "primary", "#FF6600"
            resValue "color", "primary_dark", "#FF8106"
            resValue "color", "accent", "#00B018"
            buildConfigField "String", "TEMP_UNIT", "\"metric\""
            buildConfigField "String", "DEFAULT_CITY", "\"ontario\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'NOTICE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    applicationVariants.matching { !it.buildType.name.contains('Release') }.all { createJacocoTask(it) }
}

dependencies {
    compile project(":model")
    compile project(":network")
    compile fileTree(dir: 'libs', include: '*.jar')
    compile "com.android.support:appcompat-v7:${versions.androidSupport}"
    compile "com.android.support:support-v4:${versions.androidSupport}"
    compile "com.android.support:support-v13:${versions.androidSupport}"
    compile "com.android.support:cardview-v7:${versions.androidSupport}"
    compile "com.android.support:design:${versions.androidSupport}"
    compile "com.google.android.gms:play-services-location:${versions.playServices}"
    compile "com.android.support:recyclerview-v7:${versions.androidSupport}"
    compile "com.google.dagger:dagger:${versions.dagger}"
    compile "com.jakewharton.timber:timber:${versions.timber}"
    compile "com.jakewharton:butterknife:${versions.butterknife}"
    compile "javax.annotation:jsr250-api:${versions.jsr250}"
    compile "com.lacronicus:easydatastorelib:${versions.easyDataStore}"
    compile "io.realm:realm-android:${versions.realm}"
    compile "com.github.thorbenprimke:realm-recyclerview:${versions.realmRecyclerView}"
    compile("com.crashlytics.sdk.android:crashlytics:${versions.fabricClient}") {
        transitive = true;
    }

    compile "io.reactivex:rxandroid:${versions.rxAndroid}"
    compile "com.jakewharton.rxbinding:rxbinding:${versions.rxBinding}"
    compile "com.jakewharton.rxbinding:rxbinding-support-v4:${versions.rxBinding}"
    compile "com.jakewharton.rxbinding:rxbinding-recyclerview-v7:${versions.rxBinding}"
    compile "com.trello:rxlifecycle:${versions.rxLifecycle}"

    apt "com.google.dagger:dagger-compiler:${versions.dagger}"

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.robolectric:robolectric:${versions.robolectric}"
    testCompile "org.robolectric:shadows-support-v4:${versions.robolectric}"
    testCompile "org.mockito:mockito-core:${versions.mockito}"
    testCompile "org.assertj:assertj-core:${versions.assertJ}"
}

// Display more verbose information when running tests from CLI
tasks.withType(Test).whenTaskAdded { testTask ->
    testTask.maxParallelForks 4
    testTask.testLogging config.testOptions
}
